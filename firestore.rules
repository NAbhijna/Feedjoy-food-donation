rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow any authenticated user to read profiles, but only allow a user to write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow anyone to read listings, but only the owner to create/update/delete
    match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userRef;
    }

    // Rules for chats and messages
    match /chats/{chatId} {
      // Allow a user to get a document if their UID is in the document ID.
      // This is essential for checking if a chat exists before creating one.
      allow get: if request.auth != null && request.auth.uid in chatId.split('_');
      
      // Allow a user to list, update, or delete chats they are a part of.
      allow list, update, delete: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Allow a user to create a chat if they are a participant in the new document.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;

      // Rules for the messages subcollection
      match /messages/{messageId} {
        // A user can read/write messages if they are a participant of the parent chat.
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Rules for notifications and pickup requests
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.toUserId;
      allow create: if request.auth != null;
    }

    match /pickupRequests/{requestId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.donorId);
    }
  }
}
      }
    }
  }
}
